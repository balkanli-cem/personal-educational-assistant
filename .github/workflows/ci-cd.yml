name: Enhanced CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  AZURE_WEBAPP_NAME: personalized-educational-assistant
  AZURE_RESOURCE_GROUP: reimainge-dev-env-openAI
  AZURE_LOCATION: West Europe

jobs:
  test-backend:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Install backend dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest
    
    - name: Test model imports
      run: |
        cd backend
        python -c "from app.models import User, UserProfile, LearningSession, Quiz, QuizQuestion, QuizResponse, LearningProgress; print('âœ… All models imported successfully')"
    
    - name: Test database creation
      run: |
        cd backend
        python -c "from app.models.database import Base, engine; Base.metadata.create_all(bind=engine); print('âœ… Database tables created successfully')"
    
    - name: Run model tests
      run: |
        cd backend
        python test_models_simple.py
    
    - name: Run API tests
      run: |
        cd backend
        python test_api_simple.py

  test-frontend:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Install frontend dependencies
      run: |
        cd frontend
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Test frontend imports
      run: |
        cd frontend
        python -c "import streamlit; print('âœ… Streamlit import successful')"

  build-and-deploy:
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      run: |
        docker build -t personalized-educational-assistant:latest .
        echo "âœ… Docker image built successfully"
    
    - name: Test Docker image
      run: |
        docker run --rm -d --name test-app -p 8000:8000 personalized-educational-assistant:latest
        sleep 10
        curl -f http://localhost:8000/health || exit 1
        docker stop test-app
        echo "âœ… Docker container test passed"
    
    - name: Login to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    
    - name: Login to Azure Container Registry
      run: |
        az acr login --name ${{ secrets.ACR_NAME }}
    
    - name: Build and push to ACR
      run: |
        az acr build --registry ${{ secrets.ACR_NAME }} --image personalized-educational-assistant:${{ github.sha }} .
    
    - name: Deploy to Azure Container Instances
      run: |
        az container create \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --name ${{ env.AZURE_WEBAPP_NAME }} \
          --image ${{ secrets.ACR_NAME }}.azurecr.io/personalized-educational-assistant:${{ github.sha }} \
          --cpu 1 \
          --memory 2 \
          --ports 8000 \
          --environment-variables \
            DATABASE_URL="${{ secrets.DATABASE_URL }}" \
            OPENAI_API_KEY="${{ secrets.OPENAI_API_KEY }}" \
            AZURE_OPENAI_ENDPOINT="${{ secrets.AZURE_OPENAI_ENDPOINT }}" \
            AZURE_OPENAI_API_KEY="${{ secrets.AZURE_OPENAI_API_KEY }}" \
            SECRET_KEY="${{ secrets.SECRET_KEY }}"
    
    - name: Get deployment URL
      run: |
        az container show --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --name ${{ env.AZURE_WEBAPP_NAME }} --query "ipAddress.ip" --output tsv
        echo "ðŸš€ Deployment completed! Check the IP address above."